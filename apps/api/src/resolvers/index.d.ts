export declare const resolvers: {
    Query: {
        [x: string]: any;
        author?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").Maybe<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Author>>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryAuthorArgs, "id">> | undefined;
        authors?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Author>>[], {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryAuthorsArgs, "limit" | "page">> | undefined;
        book?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").Maybe<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Book>>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryBookArgs, "id">> | undefined;
        books?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Book>>[], {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryBooksArgs, "limit" | "page">> | undefined;
        booksByAuthor?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Book>>[], {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryBooksByAuthorArgs, "authorId">> | undefined;
        user?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").Maybe<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<import("@bookly/database").UserModel>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").QueryUserArgs, "email">> | undefined;
        users?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<import("@bookly/database").UserModel>[], {}, any, {}> | undefined;
    };
    Mutation: {
        [x: string]: any;
        createAuthor?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Author>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationCreateAuthorArgs, "input">> | undefined;
        createBook?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Book>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationCreateBookArgs, "input">> | undefined;
        createUser?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<import("@bookly/database").UserModel>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationCreateUserArgs, "input">> | undefined;
        deleteAuthor?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<boolean>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationDeleteAuthorArgs, "id">> | undefined;
        deleteBook?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<boolean>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationDeleteBookArgs, "id">> | undefined;
        deleteUser?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<boolean>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationDeleteUserArgs, "id">> | undefined;
        updateBook?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<Partial<import("@bookly/graphql-schema/src/types/generated").Book>>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationUpdateBookArgs, "id" | "input">> | undefined;
        updateUser?: import("@bookly/graphql-schema/src/types/generated").Resolver<import("@bookly/graphql-schema/src/types/generated").ResolverTypeWrapper<import("@bookly/database").UserModel>, {}, any, import("@bookly/graphql-schema/src/types/generated").RequireFields<import("@bookly/graphql-schema/src/types/generated").MutationUpdateUserArgs, "id" | "input">> | undefined;
    };
    Book: {
        author: (parent: any, _: any, { loaders }: import("../context").Context) => Promise<import("@bookly/database").Author | undefined>;
    };
    Author: {
        books: (parent: any, _: any, { loaders }: import("../context").Context) => Promise<any>;
    };
};
